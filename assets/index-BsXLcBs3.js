var D=Object.defineProperty;var Z=(r,t,e)=>t in r?D(r,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):r[t]=e;var p=(r,t,e)=>Z(r,typeof t!="symbol"?t+"":t,e);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))i(o);new MutationObserver(o=>{for(const n of o)if(n.type==="childList")for(const s of n.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&i(s)}).observe(document,{childList:!0,subtree:!0});function e(o){const n={};return o.integrity&&(n.integrity=o.integrity),o.referrerPolicy&&(n.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?n.credentials="include":o.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function i(o){if(o.ep)return;o.ep=!0;const n=e(o);fetch(o.href,n)}})();const h=16,P=15,b={stone:{id:1,isOpaque:!0,isLightSource:!1,lightEmission:0,filterLight:0},glowstone:{id:2,isOpaque:!0,isLightSource:!0,lightEmission:15,filterLight:0},glass:{id:20,isOpaque:!1,isLightSource:!1,lightEmission:0,filterLight:0},water:{id:8,isOpaque:!1,isLightSource:!1,lightEmission:0,filterLight:2},air:{id:0,isOpaque:!1,isLightSource:!1,lightEmission:0,filterLight:0}},U=Object.entries(b).reduce((r,[t,e])=>(r[e.id]=e,r),{});class N{constructor(t){p(this,"blocks");p(this,"lightData");p(this,"position");p(this,"isLoaded",!1);this.position=t,this.blocks=new Uint8Array(h*h*h),this.lightData=new Uint8Array(h*h*h)}getBlock(t,e,i){const o=this.getIndex(t,e,i),n=this.blocks[o];if(!n)return{id:0,isOpaque:!1,isLightSource:!1,lightEmission:0};const s=U[n];if(!s)throw new Error(`Block ${n} not found`);return{id:n,isOpaque:s.isOpaque,isLightSource:s.isLightSource,lightEmission:s.lightEmission}}getBlockLight(t,e,i){const o=this.getIndex(t,e,i);return this.lightData[o]&15}getSunLight(t,e,i){const o=this.getIndex(t,e,i);return this.lightData[o]>>4&15}setBlockLight(t,e,i,o){const n=this.getIndex(t,e,i);this.lightData[n]=this.lightData[n]&240|o&15}setSunLight(t,e,i,o){const n=this.getIndex(t,e,i);this.lightData[n]=this.lightData[n]&15|(o&15)<<4}setBlock(t,e,i,o){const n=this.getIndex(t,e,i);this.blocks[n]=o}getIndex(t,e,i){return e*h*h+i*h+t}}class Q{constructor(t,e){p(this,"sections");p(this,"position");p(this,"isLoaded",!1);p(this,"_debug_get_block_count",0);this.world=e,this.position=t,this.sections=new Map}getSection(t){return this.sections.has(t)||this.sections.set(t,new N({x:this.position.x,y:t,z:this.position.z})),this.sections.get(t)}getSectionNoCreate(t){return this.sections.get(t)}getBlock(t,e,i){this._debug_get_block_count++;const o=Math.floor(e/h),n=(e%h+h)%h,s=this.getSectionNoCreate(o);return s?s.getBlock(t,n,i):b.air}setBlock(t,e,i,o){const n=Math.floor(e/h),s=(e%h+h)%h;this.getSection(n).setBlock(t,s,i,o)}getBlockLight(t,e,i){const o=Math.floor(e/h),n=(e%h+h)%h,s=this.getSectionNoCreate(o);return s?s.getBlockLight(t,n,i):0}setBlockLight(t,e,i,o){const n=Math.floor(e/h),s=(e%h+h)%h;this.getSection(n).setBlockLight(t,s,i,o)}getSunLight(t,e,i){const o=Math.floor(e/h),n=(e%h+h)%h,s=this.getSectionNoCreate(o);return s?s.getSunLight(t,n,i):0}setSunLight(t,e,i,o){const n=Math.floor(e/h),s=(e%h+h)%h;this.getSection(n).setSunLight(t,s,i,o)}}class K{constructor(){p(this,"chunks",new Map);p(this,"WORLD_HEIGHT",320);p(this,"WORLD_MIN_Y",-64);p(this,"SUPPORTS_SKY_LIGHT",!1)}getChunkAndLocalCoord(t,e,i){const o=Math.floor(t/h),n=Math.floor(i/h),s=(t%h+h)%h,c=(i%h+h)%h;return{chunk:this.getChunk(o,n),localX:s,localZ:c}}getBlock(t,e,i){const{chunk:o,localX:n,localZ:s}=this.getChunkAndLocalCoord(t,e,i);return o?o.getBlock(n,e,s):b.air}setBlock(t,e,i,o){const n=Math.floor(t/h),s=Math.floor(i/h);let c=this.getChunk(n,s);c||(c=new Q({x:n,z:s},this),this.setChunk(n,s,c));const{localX:a,localZ:g}=this.getChunkAndLocalCoord(t,e,i);c.setBlock(a,e,g,o)}getChunk(t,e){return this.chunks.get(`${t},${e}`)}hasChunk(t,e){return this.chunks.has(`${t},${e}`)}setChunk(t,e,i){i?this.chunks.set(`${t},${e}`,i):this.chunks.delete(`${t},${e}`)}getBlockLight(t,e,i){const{chunk:o,localX:n,localZ:s}=this.getChunkAndLocalCoord(t,e,i);return o?o.getBlockLight(n,e,s):0}setBlockLight(t,e,i,o){const{chunk:n,localX:s,localZ:c}=this.getChunkAndLocalCoord(t,e,i);n&&n.setBlockLight(s,e,c,o)}getSunLight(t,e,i){const{chunk:o,localX:n,localZ:s}=this.getChunkAndLocalCoord(t,e,i);return o?o.getSunLight(n,e,s):0}setSunLight(t,e,i,o){const{chunk:n,localX:s,localZ:c}=this.getChunkAndLocalCoord(t,e,i);n&&n.setSunLight(s,e,c,o)}}class G{constructor(t,e){p(this,"chunks",new Map);p(this,"worldHeight");p(this,"worldMinY");this.worldHeight=t,this.worldMinY=e}getChunkKey(t,e){return`${t},${e}`}getIndex(t,e,i){const o=(t%h+h)%h,n=(i%h+h)%h,s=e-this.worldMinY;return o+n*h+s*h*h}setBlockLight(t,e,i,o){const n=Math.floor(t/h),s=Math.floor(i/h),c=this.getChunkKey(n,s);let a=this.chunks.get(c);if(!a){const l=h*h*(this.worldHeight-this.worldMinY);a={blockLight:new Uint8Array(l),skyLight:new Uint8Array(l),position:{x:n,z:s}},this.chunks.set(c,a)}const g=this.getIndex(t,e,i);a.blockLight[g]=o}setSkyLight(t,e,i,o){const n=Math.floor(t/h),s=Math.floor(i/h),c=this.getChunkKey(n,s);let a=this.chunks.get(c);if(!a){const l=h*h*(this.worldHeight-this.worldMinY);a={blockLight:new Uint8Array(l),skyLight:new Uint8Array(l),position:{x:n,z:s}},this.chunks.set(c,a)}const g=this.getIndex(t,e,i);a.skyLight[g]=o}getBlockLight(t,e,i){const o=Math.floor(t/h),n=Math.floor(i/h),s=this.chunks.get(this.getChunkKey(o,n));if(!s)return 0;const c=this.getIndex(t,e,i);return s.blockLight[c]??0}getSkyLight(t,e,i){const o=Math.floor(t/h),n=Math.floor(i/h),s=this.chunks.get(this.getChunkKey(o,n));if(!s)return 0;const c=this.getIndex(t,e,i);return s.skyLight[c]??0}dumpChunk(t,e){const i=this.getChunkKey(t,e),o=this.chunks.get(i);if(o)return{blockLight:new Uint8Array(o.blockLight),skyLight:new Uint8Array(o.skyLight),position:{...o.position},worldHeight:this.worldHeight,worldMinY:this.worldMinY}}loadChunk(t){const e=this.getChunkKey(t.position.x,t.position.z);this.worldMinY=t.worldMinY,this.worldHeight=t.worldHeight,this.chunks.set(e,{blockLight:new Uint8Array(t.blockLight),skyLight:new Uint8Array(t.skyLight),position:{...t.position}})}hasChunk(t,e){return this.chunks.has(this.getChunkKey(t,e))}unloadChunk(t,e){this.chunks.delete(this.getChunkKey(t,e))}getWorldHeight(){return this.worldHeight}getWorldMinY(){return this.worldMinY}}const M=class M{constructor(t=new K){p(this,"PARALLEL_CHUNK_PROCESSING",!0);p(this,"worldLightHolder");p(this,"sunLightQueue",[]);p(this,"blockLightQueue",[]);p(this,"lightRemovalQueue",[]);p(this,"pendingLightUpdates",new Map);p(this,"isProcessingLight",!1);p(this,"performanceStats",new Map);p(this,"affectedChunksTimestamps",new Map);p(this,"onChunkProcessed",[]);p(this,"chunksProcessed",0);p(this,"lastBlockUpdates",{});this.externalWorld=t,this.worldLightHolder=new G(this.WORLD_HEIGHT,this.WORLD_MIN_Y)}get WORLD_HEIGHT(){return this.externalWorld.WORLD_HEIGHT}get WORLD_MIN_Y(){return this.externalWorld.WORLD_MIN_Y}hasChunk(t,e){var i,o;return((o=(i=this.externalWorld).hasChunk)==null?void 0:o.call(i,t,e))??this.externalWorld.getChunk(t,e)!==void 0}getBlockLight(t,e,i){return this.externalWorld.getBlockLight(t,e,i)}setBlockChunkAffected(t,e,i){const{chunk:o}=this.getChunkAndLocalCoord(t,e,i);if(!o)return;const n=this.getChunkKey(o.position.x,o.position.z);this.affectedChunksTimestamps.set(n,Date.now())}setBlockLight(t,e,i,o){this.setBlockChunkAffected(t,e,i),this.externalWorld.setBlockLight(t,e,i,o)}getSunLight(t,e,i){return this.externalWorld.getSunLight(t,e,i)}setSunLight(t,e,i,o){this.setBlockChunkAffected(t,e,i),this.externalWorld.setSunLight(t,e,i,o)}getHighestBlockInColumn(t,e,i){var n,s;const o=(s=(n=this.externalWorld).getHighestBlockInColumn)==null?void 0:s.call(n,t,e,i);if(o!==void 0)return o;for(let c=this.WORLD_HEIGHT-1;c>=this.WORLD_MIN_Y;c--){const a=t.getBlock(e,c,i);if(a&&a.id!==b.air.id)return c}return this.WORLD_MIN_Y}getChunkKey(t,e){return`${t},${e}`}markStart(t){const e=performance.now();return performance.mark(`${t}-${e}-start`),()=>{this.markEnd(t,e)}}markEnd(t,e){if(performance.mark(`${t}-${e}-end`),performance.measure(t,`${t}-${e}-start`,`${t}-${e}-end`),typeof performance<"u"){const i=performance.getEntriesByName(t).pop();if(i){const o=this.performanceStats.get(t)||{calls:0,totalTime:0};o.calls++,o.totalTime+=i.duration,this.performanceStats.set(t,o)}}performance.clearMarks(`${t}-${e}-start`),performance.clearMarks(`${t}-${e}-end`),performance.clearMeasures(t)}getPerformanceStats(){const t=["Performance Statistics:"];for(const[e,i]of this.performanceStats.entries())t.push(`${e}:
  Calls: ${i.calls}
  Total Time: ${i.totalTime.toFixed(2)}ms
  Average Time: ${(i.totalTime/i.calls).toFixed(2)}ms`);return t.join(`
`)}getBlock(t,e,i){return this.externalWorld.getBlock(t,e,i)}async setBlockUpdateChunkIfNeeded(t,e,i){const{chunk:o}=this.getChunkAndLocalCoord(t,e,i);if(!o)return;const n=this.getBlock(t,e,i),s=this.getBlockLight(t,e,i),c=this.getSunLight(t,e,i),a=`${t},${e},${i}`,g=this.getChunkKey(o.position.x,o.position.z);this.lastBlockUpdates[g]||(this.lastBlockUpdates[g]=new Map);const l=this.lastBlockUpdates[g];if(l.get(a)===(n==null?void 0:n.id))return;l.set(a,(n==null?void 0:n.id)??0);let u=!1,d=!1;const k=((n==null?void 0:n.filterLight)??0)>0;if(n!=null&&n.isOpaque||k?c>0&&(u=!0):c===0&&(this.getSunLight(t,e+1,i)>2&&(u=!0),(this.getSunLight(t+1,e,i)>2||this.getSunLight(t-1,e,i)>2||this.getSunLight(t,e,i+1)>2||this.getSunLight(t,e,i-1)>2)&&(u=!0)),n!=null&&n.isLightSource)d=!0;else if(n!=null&&n.isOpaque||k)if(s>0)d=!0;else for(const C of M.DIRECTIONS){const O=t+C.x,x=e+C.y,T=i+C.z;if(!(x<this.WORLD_MIN_Y||x>=this.WORLD_HEIGHT)&&this.getBlockLight(O,x,T)>0){d=!0;break}}if(!u&&!d)return;let S;u&&d?S=void 0:u?S="sun":d&&(S="block");const m=performance.now(),v=await this.receiveUpdateColumn(o.position.x,o.position.z,S),w=performance.now();return{chunk:o,updateType:S,affectedChunks:v,time:w-m}}setBlockLegacy(t,e,i,o,n=!0){this.getBlock(t,e,i);const s=this.getBlockLight(t,e,i),c=this.getSunLight(t,e,i),a=[],g=[];for(const l of M.DIRECTIONS){const u=t+l.x,d=e+l.y,k=i+l.z;d<this.WORLD_MIN_Y||d>=this.WORLD_HEIGHT||(a.push({x:u,y:d,z:k,level:this.getBlockLight(u,d,k)}),g.push({x:u,y:d,z:k,level:this.getSunLight(u,d,k)}))}if(s>0&&this.removeBlockLight(t,e,i),c>0&&this.removeSunLight(t,e,i),this.lightRemovalQueue.length>0,this.externalWorld.setBlock(t,e,i,o.id),o.isLightSource){this.setBlockLight(t,e,i,o.lightEmission);const{chunk:l,localX:u,localZ:d}=this.getChunkAndLocalCoord(t,e,i);l&&this.blockLightQueue.push({x:u,y:e,z:d,chunk:l})}o.isOpaque?this.updateSunLightRemove(t,e,i):this.updateSunLightAdd(t,e,i);for(const l of a)if(this.getBlockLight(l.x,l.y,l.z)>0){const{chunk:d,localX:k,localZ:S}=this.getChunkAndLocalCoord(l.x,l.y,l.z);d&&this.blockLightQueue.push({x:k,y:l.y,z:S,chunk:d})}for(const l of g)if(this.getSunLight(l.x,l.y,l.z)>0){const{chunk:d,localX:k,localZ:S}=this.getChunkAndLocalCoord(l.x,l.y,l.z);d&&this.sunLightQueue.push({x:k,y:l.y,z:S,chunk:d})}n&&(this.blockLightQueue.length>0&&this.propagateBlockLight(),this.sunLightQueue.length>0&&this.propagateSunLight())}getChunkAndLocalCoord(t,e,i){const o=Math.floor(t/h),n=Math.floor(i/h),s=(t%h+h)%h,c=(i%h+h)%h;return{chunk:this.externalWorld.getChunk(o,n),localX:s,localZ:c}}removeBlockLight(t,e,i,o=this.getBlockLight(t,e,i)){const{chunk:n,localX:s,localZ:c}=this.getChunkAndLocalCoord(t,e,i);n&&(this.lightRemovalQueue.push({x:s,y:e,z:c,value:o,chunk:n}),this.setBlockLight(t,e,i,0))}removeSunLight(t,e,i){const{chunk:o,localX:n,localZ:s}=this.getChunkAndLocalCoord(t,e,i);if(!o)return;const c=this.getSunLight(t,e,i);this.lightRemovalQueue.push({x:n,y:e,z:s,value:c,chunk:o,isSunLight:!0}),this.setSunLight(t,e,i,0)}unPropagateLight(){for(;this.lightRemovalQueue.length>0;){const t=this.lightRemovalQueue.shift(),{x:e,y:i,z:o,value:n,chunk:s}=t,c=t.isSunLight??(s.getSunLight(e,i,o)===0&&n>0);for(const a of M.DIRECTIONS){const g=s.position.x*h+e+a.x,l=i+a.y,u=s.position.z*h+o+a.z;if(l<this.WORLD_MIN_Y||l>=this.WORLD_HEIGHT)continue;const{chunk:d,localX:k,localZ:S}=this.getChunkAndLocalCoord(g,l,u);if(!d)continue;const m=c?d.getSunLight(k,l,S):d.getBlockLight(k,l,S);m!==0&&m<n?c?this.removeSunLight(g,l,u):this.removeBlockLight(g,l,u,m):m>=n&&(c?this.sunLightQueue.push({x:k,y:l,z:S,chunk:d}):this.blockLightQueue.push({x:k,y:l,z:S,chunk:d}))}}}updateSunLightRemove(t,e,i){if(!this.externalWorld.SUPPORTS_SKY_LIGHT)return;const o=this.getBlock(t,e,i);if(!(o!=null&&o.isOpaque))return;this.getSunLight(t,e,i)>0&&this.removeSunLight(t,e,i);for(let c=e-1;c>=this.WORLD_MIN_Y&&this.getSunLight(t,c,i)!==0;c--){const g=this.getBlock(t,c,i);if(g!=null&&g.isOpaque)break;this.removeSunLight(t,c,i)}const s=[{x:-1,y:0,z:0},{x:1,y:0,z:0},{x:0,y:0,z:-1},{x:0,y:0,z:1},{x:-1,y:0,z:-1},{x:-1,y:0,z:1},{x:1,y:0,z:-1},{x:1,y:0,z:1}];for(const c of s){const a=t+c.x,g=i+c.z;if(this.getSunLight(a,e,g)>0){const{chunk:u,localX:d,localZ:k}=this.getChunkAndLocalCoord(a,e,g);u&&this.sunLightQueue.push({x:d,y:e,z:k,chunk:u})}}for(let c=-1;c<=1;c++){if(c===0)continue;const a=e+c;if(!(a<this.WORLD_MIN_Y||a>=this.WORLD_HEIGHT))for(const g of s){const l=t+g.x,u=i+g.z;if(this.getSunLight(l,a,u)>0){const{chunk:k,localX:S,localZ:m}=this.getChunkAndLocalCoord(l,a,u);k&&this.sunLightQueue.push({x:S,y:a,z:m,chunk:k})}}}}updateSunLightAdd(t,e,i){if(!this.externalWorld.SUPPORTS_SKY_LIGHT)return;const o=this.getBlock(t,e,i);if(o!=null&&o.isOpaque)return;let n=!0;for(let l=e+1;l<this.WORLD_HEIGHT;l++){const u=this.getBlock(t,l,i);if(u!=null&&u.isOpaque){n=!1;break}}if(!n)return;this.setSunLight(t,e,i,M.MAX_LEVEL);const{chunk:s,localX:c,localZ:a}=this.getChunkAndLocalCoord(t,e,i);s&&this.sunLightQueue.push({x:c,y:e,z:a,chunk:s});let g=M.MAX_LEVEL;for(let l=e-1;l>=this.WORLD_MIN_Y;l--){const u=this.getBlock(t,l,i);if(u!=null&&u.isOpaque||(u!=null&&u.filterLight?g-=u.filterLight:g-=1,g<=0))break;this.setSunLight(t,l,i,g);const{chunk:d,localX:k,localZ:S}=this.getChunkAndLocalCoord(t,l,i);d&&this.sunLightQueue.push({x:k,y:l,z:S,chunk:d})}}propagateSunLight(){const t=this.markStart("propagateSunLight"),e=new Set;for(;this.sunLightQueue.length>0;){const i=this.sunLightQueue.shift(),{x:o,y:n,z:s,chunk:c}=i,a=`${c.position.x},${c.position.z},${o},${n},${s}`;if(e.has(a))continue;e.add(a);const g=c.getBlock(o,n,s),l=c.getSunLight(o,n,s);if(!(g!=null&&g.isOpaque)&&!(l<=0))for(const u of M.DIRECTIONS){const d=c.position.x*h+o+u.x,k=n+u.y,S=c.position.z*h+s+u.z;if(k<this.WORLD_MIN_Y||k>=this.WORLD_HEIGHT)continue;const{chunk:m,localX:v,localZ:w}=this.getChunkAndLocalCoord(d,k,S);if(!m){this.addPendingLight(d,k,S,c);continue}const C=m.getBlock(v,k,w),O=m.getSunLight(v,k,w);if(C!=null&&C.isOpaque)continue;let x=l-1;C!=null&&C.filterLight&&(x-=C.filterLight),u.y===-1&&!(C!=null&&C.isOpaque)&&(x=Math.max(0,l-1)),!(x<=0)&&O<x&&(m.setSunLight(v,k,w,x),this.setBlockChunkAffected(d,k,S),this.sunLightQueue.push({x:v,y:k,z:w,chunk:m}))}}t()}propagateGeneric(t,e,i,o){const n=new Set;for(;t.length>0;){const s=t.shift(),{x:c,y:a,z:g,chunk:l}=s,u=`${l.position.x},${l.position.z},${c},${a},${g}`;if(n.has(u))continue;n.add(u);const d=l.getBlock(c,a,g),k=e(l,c,a,g);if(d!=null&&d.isOpaque&&!d.isLightSource)continue;const S=[{x:-1,y:0,z:0},{x:1,y:0,z:0},{x:0,y:-1,z:0},{x:0,y:1,z:0},{x:0,y:0,z:-1},{x:0,y:0,z:1}];for(const m of S){const v=l.position.x*h+c+m.x,w=a+m.y,C=l.position.z*h+g+m.z;if(w<this.WORLD_MIN_Y||w>=this.WORLD_HEIGHT)continue;const{chunk:O,localX:x,localZ:T}=this.getChunkAndLocalCoord(v,w,C);if(!O){this.addPendingLight(v,w,C,l);continue}const E=O.getBlock(x,w,T),$=e(O,x,w,T),z=o(E,k);z!==0&&!(E!=null&&E.isOpaque)&&$<z&&(i(O,x,w,T,z),t.push({x,y:w,z:T,chunk:O}))}}}propagateBlockLight(){const t=this.markStart("propagateLight");this.propagateGeneric(this.blockLightQueue,(e,i,o,n)=>e.getBlockLight(i,o,n),(e,i,o,n,s)=>e.setBlockLight(i,o,n,s),this.filterLight),t()}async receiveUpdateColumn(t,e,i){if(this.affectedChunksTimestamps.clear(),!this.externalWorld.getChunk(t,e))throw new Error(`Chunk ${t},${e} not loaded yet`);const n=Date.now(),s=this.getChunkKey(t,e),c={column:{x:t,z:e},priority:1,timestamp:Date.now(),terminate:()=>{},updateType:i},a=this.pendingLightUpdates.get(s);a&&a.terminate(),this.pendingLightUpdates.set(s,c),await this.processLightQueue();const l=Array.from(this.affectedChunksTimestamps.entries()).filter(([u,d])=>d>=n).map(([u])=>{const[d,k]=u.split(",").map(Number);return{x:d,z:k}});for(const u of l)this.onChunkProcessed.forEach(d=>d(u.x,u.z));return l}async processLightQueue(){var e;const t=this.markStart("processLightQueue");this.isProcessingLight=!0;try{const i=Array.from(this.pendingLightUpdates.entries());for(const[o,n]of i){const s=this.pendingLightUpdates.get(o);if(!s||s.timestamp!==n.timestamp)continue;const{column:c,updateType:a}=n,g=this.externalWorld.getChunk(c.x,c.z);g&&((a==="block"||a===void 0)&&await this.processTorchlightForChunk(g),(a==="sun"||a===void 0)&&await this.processSunlightForChunk(g),((e=this.pendingLightUpdates.get(o))==null?void 0:e.timestamp)===n.timestamp&&this.pendingLightUpdates.delete(o),await new Promise(l=>setTimeout(l,0)),this.chunksProcessed++)}}finally{this.isProcessingLight=!1,t()}}async processTorchlightForChunk(t){const e=this.markStart("processTorchlightForChunk");for(let i=0;i<h;i++)for(let o=0;o<h;o++)for(let n=this.WORLD_MIN_Y;n<this.WORLD_HEIGHT;n++){const s=t.getBlock(i,n,o);if(s!=null&&s.isLightSource){const c=t.position.x*h+i,a=t.position.z*h+o;this.setBlockLight(c,n,a,s.lightEmission),this.blockLightQueue.push({x:i,y:n,z:o,chunk:t})}}await this.propagateBlockLight(),e()}async processSunlightForChunk(t){if(!this.externalWorld.SUPPORTS_SKY_LIGHT)return;const e=this.markStart("processSunlightForChunk");for(let i=0;i<h;i++)for(let o=0;o<h;o++){const n=this.getHighestBlockInColumn(t,i,o);for(let c=n+1;c<this.WORLD_HEIGHT;c++){const a=t.position.x*h+i,g=t.position.z*h+o;this.setSunLight(a,c,g,M.MAX_LEVEL)}if(n<this.WORLD_HEIGHT-1){const c=n+1;this.sunLightQueue.push({x:i,y:c,z:o,chunk:t})}let s=M.MAX_LEVEL;for(let c=n;c>=this.WORLD_MIN_Y;c--){const a=t.getBlock(i,c,o),g=t.position.x*h+i,l=t.position.z*h+o;a!=null&&a.isOpaque?(this.setSunLight(g,c,l,0),s=0):(a!=null&&a.filterLight?s=Math.max(0,s-a.filterLight):s=Math.max(0,s-1),this.setSunLight(g,c,l,s),s>0&&this.sunLightQueue.push({x:i,y:c,z:o,chunk:t}))}}await this.propagateSunLight(),this.setBlockChunkAffected(t.position.x*h,0,t.position.z*h),e()}addPendingLight(t,e,i,o){const n=Math.floor(t/h),s=Math.floor(i/h),c=this.getChunkKey(n,s);this.pendingLightUpdates.has(c)||this.pendingLightUpdates.set(c,{column:{x:n,z:s},priority:2,timestamp:Date.now(),terminate:()=>{},updateType:void 0});const{chunk:a}=this.getChunkAndLocalCoord(t,e,i);if(a){const g=(t%h+h)%h,l=(i%h+h)%h;o.position.x*h+Math.floor(o.position.x*h+h-1-t>=h?h-1:o.position.x*h+h-1-t),o.position.z*h+Math.floor(o.position.z*h+h-1-i>=h?h-1:o.position.z*h+h-1-i);const u=t-(t>o.position.x*h?1:-1),d=i-(i>o.position.z*h?1:-1),k=this.getSunLight(u,e,d);if(k>0){const m=Math.max(0,k-1);m>0&&(this.setSunLight(t,e,i,m),this.sunLightQueue.push({x:g,y:e,z:l,chunk:a}))}const S=this.getBlockLight(u,e,d);if(S>0){const m=Math.max(0,S-1);m>0&&(this.setBlockLight(t,e,i,m),this.blockLightQueue.push({x:g,y:e,z:l,chunk:a}))}}}filterLight(t,e){return t?t.isOpaque&&!t.isLightSource?0:t.filterLight?Math.max(0,e-1-t.filterLight):Math.max(0,e-1):Math.max(0,e-1)}getLightLevelsString(t,e,i,o,n,s){const c=s==="blockLight"?(g,l,u,d)=>g.getBlockLight(l,u,d):(g,l,u,d)=>g.getSunLight(l,u,d),a=[];for(let g=e;g<=e+n;g++){const l=[];for(let u=t;u<=t+o;u++){const{chunk:d,localX:k,localZ:S}=this.getChunkAndLocalCoord(u,i,g),m=d?c(d,k,i,S):"--";l.push(m.toString().padStart(2," "))}a.push("| "+l.join(" | ")+" |")}return a.join(`
`)}columnCleanup(t,e){const i=this.getChunkKey(t,e);this.worldLightHolder.unloadChunk(t,e),this.chunksProcessed--,delete this.lastBlockUpdates[i]}};p(M,"MAX_LEVEL",15),p(M,"DIRECTIONS",[{x:-1,y:0,z:0},{x:1,y:0,z:0},{x:0,y:-1,z:0},{x:0,y:1,z:0},{x:0,y:0,z:-1},{x:0,y:0,z:1}]);let Y=M;const X=[{type:"number",label:"Display Size",key:"displaySize",value:10,min:1,max:32},{type:"number",label:"Block Size",key:"blockSize",value:32,min:16,max:64},{type:"select",label:"View Plane",key:"viewPlane",value:"XZ",options:[{value:"XZ",label:"XZ"},{value:"ZY",label:"ZY"},{value:"XY",label:"XY"}]},{type:"number",label:"Slice Position",key:"slicePosition",value:64,min:0,max:255},{type:"select",label:"Light Type",key:"lightType",value:"blockLight",options:[{value:"blockLight",label:"Block Light"},{value:"skyLight",label:"Sky Light"}]},{type:"select",label:"Place Block",key:"placeBlockType",value:"glowstone",options:[{value:"glowstone",label:"Glowstone"},{value:"stone",label:"Stone"},{value:"water",label:"Water"}]}],q=()=>{const r=new URLSearchParams(window.location.search);return X.reduce((t,e)=>{const i=r.get(e.key);return i===null?{...t,[e.key]:e.value}:{...t,[e.key]:e.type==="number"?parseInt(i):i}},{})},f=q();let y;const F=()=>{y=new Y,globalThis.world=y,y.setBlock(5,64,5,b.glowstone),y.setBlock(5,64,5,b.stone),y.receiveUpdateColumn(0,0)},j=()=>{F()},V=()=>{const r=document.createElement("div");r.style.fontFamily="monospace",r.style.whiteSpace="pre",r.style.margin="10px",I.appendChild(r),setInterval(()=>{r.textContent=y.getPerformanceStats()},500)},I=document.createElement("div");document.body.appendChild(I);const H=document.createElement("div");H.style.marginBottom="10px";I.appendChild(H);const J=()=>{X.forEach(r=>{var e,i,o;const t=document.createElement("label");if(t.textContent=` ${r.label}: `,I.appendChild(t),r.type==="number"){const n=document.createElement("input");n.type="number",n.value=f[r.key].toString(),n.min=((e=r.min)==null?void 0:e.toString())||"0",n.max=((i=r.max)==null?void 0:i.toString())||"255",n.addEventListener("change",()=>{f[r.key]=parseInt(n.value),(r.key==="displaySize"||r.key==="blockSize")&&(B.width=f.displaySize*f.blockSize,B.height=f.displaySize*f.blockSize),R(),_()}),I.appendChild(n)}else if(r.type==="select"){const n=document.createElement("select");(o=r.options)==null||o.forEach(s=>{const c=document.createElement("option");c.value=s.value,c.textContent=s.label,n.appendChild(c)}),n.value=f[r.key].toString(),n.addEventListener("change",()=>{f[r.key]=n.value,R(),_()}),I.appendChild(n)}})};J();const B=document.createElement("canvas"),L=B.getContext("2d");B.width=f.displaySize*f.blockSize;B.height=f.displaySize*f.blockSize;I.appendChild(B);const W=(r,t)=>{switch(f.viewPlane){case"XZ":return[r,f.slicePosition,t];case"ZY":return[f.slicePosition,t,r];case"XY":return[r,t,f.slicePosition]}},R=()=>{const r=new URLSearchParams;Object.entries(f).forEach(([t,e])=>{r.set(t,e.toString())}),window.history.replaceState({},"",`${window.location.pathname}?${r.toString()}`)},_=()=>{L.clearRect(0,0,B.width,B.height),L.strokeStyle="#ccc";for(let r=0;r<=f.displaySize;r++)L.beginPath(),L.moveTo(r*f.blockSize,0),L.lineTo(r*f.blockSize,B.height),L.stroke();for(let r=0;r<=f.displaySize;r++)L.beginPath(),L.moveTo(0,r*f.blockSize),L.lineTo(B.width,r*f.blockSize),L.stroke();L.strokeStyle="#ffff00",L.lineWidth=2;for(let r=0;r<=f.displaySize;r+=h)L.beginPath(),L.moveTo(r*f.blockSize,0),L.lineTo(r*f.blockSize,B.height),L.stroke();for(let r=0;r<=f.displaySize;r+=h)L.beginPath(),L.moveTo(0,r*f.blockSize),L.lineTo(B.width,r*f.blockSize),L.stroke();L.lineWidth=1;for(let r=0;r<f.displaySize;r++)for(let t=0;t<f.displaySize;t++){const[e,i,o]=W(r,t);let n=f.lightType==="blockLight"?y.getBlockLight(e,i,o):y.getSunLight(e,i,o);const s=Math.floor(n/P*255),c=f.lightType==="blockLight"?`rgb(${s},${Math.floor(s*.8)},${Math.floor(s*.6)})`:`rgb(${Math.floor(s*.6)},${Math.floor(s*.8)},${s})`;L.fillStyle=c,L.fillRect(r*f.blockSize,t*f.blockSize,f.blockSize-1,f.blockSize-1),L.fillStyle=s<128?"white":"black",L.font="12px monospace",L.textAlign="center",L.textBaseline="middle",L.fillText(n.toString(),r*f.blockSize+f.blockSize/2,t*f.blockSize+f.blockSize/2);const a=y.getBlock(e,i,o);a&&a.id!==b.air.id&&(L.strokeStyle="rgba(0, 0, 0, 0.5)",L.lineWidth=2,a.id===b.glowstone.id?L.strokeStyle="yellow":a.id===b.stone.id?L.strokeStyle="gray":a.id===b.water.id&&(L.strokeStyle="blue"),L.strokeRect(r*f.blockSize+4,t*f.blockSize+4,f.blockSize-8,f.blockSize-8))}requestAnimationFrame(_)};V();j();_();const A=(r,t,e,i)=>{const o=y.getBlock(r,t,e);if(y.getBlockLight(r,t,e),y.getSunLight(r,t,e),i===null)o!=null&&o.isLightSource&&(y.setBlockLight(r,t,e,0),y.propagateBlockLight()),y.setBlock(r,t,e,b.air);else{const n=b[i===b.glowstone.id?"glowstone":i===b.stone.id?"stone":"water"];y.setBlock(r,t,e,n)}};B.addEventListener("mousedown",r=>{const t=B.getBoundingClientRect(),e=Math.floor((r.clientX-t.left)/f.blockSize),i=Math.floor((r.clientY-t.top)/f.blockSize);if(e<0||e>=f.displaySize||i<0||i>=f.displaySize)return;const[o,n,s]=W(e,i);if(r.button===0){const c=b[f.placeBlockType].id;A(o,n,s,c)}else r.button===2&&A(o,n,s,null)});B.addEventListener("contextmenu",r=>{r.preventDefault()});
